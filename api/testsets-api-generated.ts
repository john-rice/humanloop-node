/* tslint:disable */
/* eslint-disable */
/*
Humanloop API

The Humanloop API allows you to interact with Humanloop from your product or service.

You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.

To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:

```bash
pip install humanloop
```

To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:

```bash
npm i humanloop
```

---

Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

The version of the OpenAPI document: 4.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChatMessage } from '../models';
// @ts-ignore
import { ChatRole } from '../models';
// @ts-ignore
import { CreateTestsetRequest } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LocationPropertyInner } from '../models';
// @ts-ignore
import { PaginatedDataTestcaseResponse } from '../models';
// @ts-ignore
import { Target } from '../models';
// @ts-ignore
import { TestcaseResponse } from '../models';
// @ts-ignore
import { TestsetResponse } from '../models';
// @ts-ignore
import { TestsetsCreateTestcaseRequest } from '../models';
// @ts-ignore
import { ToolCallProperty } from '../models';
// @ts-ignore
import { UpdateTestsetRequest } from '../models';
// @ts-ignore
import { ValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TestsetsApi - axios parameter creator
 * @export
 */
export const TestsetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new testset for a project.
         * @summary Create
         * @param {string} projectId 
         * @param {CreateTestsetRequest} createTestsetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (projectId: string, createTestsetRequest: CreateTestsetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('create', 'projectId', projectId)
            // verify required parameter 'createTestsetRequest' is not null or undefined
            assertParamExists('create', 'createTestsetRequest', createTestsetRequest)
            const localVarPath = `/projects/{project_id}/testsets`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTestsetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTestsetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new testcase for a testset.
         * @summary Create Testcase
         * @param {string} testsetId String ID of testset. Starts with &#x60;evts_&#x60;.
         * @param {TestsetsCreateTestcaseRequest} testsetsCreateTestcaseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestcase: async (testsetId: string, testsetsCreateTestcaseRequest: TestsetsCreateTestcaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testsetId' is not null or undefined
            assertParamExists('createTestcase', 'testsetId', testsetId)
            // verify required parameter 'testsetsCreateTestcaseRequest' is not null or undefined
            assertParamExists('createTestcase', 'testsetsCreateTestcaseRequest', testsetsCreateTestcaseRequest)
            const localVarPath = `/testsets/{testset_id}/testcases`
                .replace(`{${"testset_id"}}`, encodeURIComponent(String(testsetId !== undefined ? testsetId : `-testset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: testsetsCreateTestcaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(testsetsCreateTestcaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a testset by ID.
         * @summary Delete
         * @param {string} id String ID of testset. Starts with &#x60;evts_&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete', 'id', id)
            const localVarPath = `/testsets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single testset by ID.
         * @summary Get
         * @param {string} id String ID of testset. Starts with &#x60;evts_&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get', 'id', id)
            const localVarPath = `/testsets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all testsets for a project.
         * @summary List For Project
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllForProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listAllForProject', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/testsets`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get testcases for a testset.
         * @summary List Testcases
         * @param {string} testsetId String ID of testset. Starts with &#x60;evts_&#x60;.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTestcases: async (testsetId: string, page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testsetId' is not null or undefined
            assertParamExists('listTestcases', 'testsetId', testsetId)
            const localVarPath = `/testsets/{testset_id}/testcases`
                .replace(`{${"testset_id"}}`, encodeURIComponent(String(testsetId !== undefined ? testsetId : `-testset_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a testset by ID.
         * @summary Update
         * @param {string} id String ID of testset. Starts with &#x60;evts_&#x60;.
         * @param {UpdateTestsetRequest} updateTestsetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updateTestsetRequest: UpdateTestsetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updateTestsetRequest' is not null or undefined
            assertParamExists('update', 'updateTestsetRequest', updateTestsetRequest)
            const localVarPath = `/testsets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateTestsetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateTestsetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestsetsApi - functional programming interface
 * @export
 */
export const TestsetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestsetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new testset for a project.
         * @summary Create
         * @param {TestsetsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: TestsetsApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestsetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.projectId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new testcase for a testset.
         * @summary Create Testcase
         * @param {TestsetsApiCreateTestcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestcase(requestParameters: TestsetsApiCreateTestcaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestcaseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestcase(requestParameters.testsetId, requestParameters.requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a testset by ID.
         * @summary Delete
         * @param {TestsetsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: TestsetsApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestsetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single testset by ID.
         * @summary Get
         * @param {TestsetsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: TestsetsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestsetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all testsets for a project.
         * @summary List For Project
         * @param {TestsetsApiListAllForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllForProject(requestParameters: TestsetsApiListAllForProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestsetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllForProject(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get testcases for a testset.
         * @summary List Testcases
         * @param {TestsetsApiListTestcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTestcases(requestParameters: TestsetsApiListTestcasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDataTestcaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTestcases(requestParameters.testsetId, requestParameters.page, requestParameters.size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a testset by ID.
         * @summary Update
         * @param {TestsetsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: TestsetsApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestsetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.id, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestsetsApi - factory interface
 * @export
 */
export const TestsetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestsetsApiFp(configuration)
    return {
        /**
         * Create a new testset for a project.
         * @summary Create
         * @param {TestsetsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: TestsetsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<TestsetResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new testcase for a testset.
         * @summary Create Testcase
         * @param {TestsetsApiCreateTestcaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestcase(requestParameters: TestsetsApiCreateTestcaseRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TestcaseResponse>> {
            return localVarFp.createTestcase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a testset by ID.
         * @summary Delete
         * @param {TestsetsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: TestsetsApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<TestsetResponse> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single testset by ID.
         * @summary Get
         * @param {TestsetsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: TestsetsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<TestsetResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all testsets for a project.
         * @summary List For Project
         * @param {TestsetsApiListAllForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllForProject(requestParameters: TestsetsApiListAllForProjectRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TestsetResponse>> {
            return localVarFp.listAllForProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get testcases for a testset.
         * @summary List Testcases
         * @param {TestsetsApiListTestcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTestcases(requestParameters: TestsetsApiListTestcasesRequest, options?: AxiosRequestConfig): AxiosPromise<PaginatedDataTestcaseResponse> {
            return localVarFp.listTestcases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a testset by ID.
         * @summary Update
         * @param {TestsetsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: TestsetsApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<TestsetResponse> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in TestsetsApi.
 * @export
 * @interface TestsetsApiCreateRequest
 */
export type TestsetsApiCreateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TestsetsApiCreate
    */
    readonly projectId: string
    
} & CreateTestsetRequest

/**
 * Request parameters for createTestcase operation in TestsetsApi.
 * @export
 * @interface TestsetsApiCreateTestcaseRequest
 */
export type TestsetsApiCreateTestcaseRequest = {
    /**
    * String ID of testset. Starts with `evts_`.
    * @type {string}
    * @memberof TestsetsApiCreateTestcase
    */
    readonly testsetId: string
    /**
    * 
    * @type {TestsetsCreateTestcaseRequest}
    * @memberof TestsetsApiCreateTestcase
    */
    readonly requestBody: TestsetsCreateTestcaseRequest
}

/**
 * Request parameters for delete operation in TestsetsApi.
 * @export
 * @interface TestsetsApiDeleteRequest
 */
export type TestsetsApiDeleteRequest = {
    
    /**
    * String ID of testset. Starts with `evts_`.
    * @type {string}
    * @memberof TestsetsApiDelete
    */
    readonly id: string
    
}

/**
 * Request parameters for get operation in TestsetsApi.
 * @export
 * @interface TestsetsApiGetRequest
 */
export type TestsetsApiGetRequest = {
    
    /**
    * String ID of testset. Starts with `evts_`.
    * @type {string}
    * @memberof TestsetsApiGet
    */
    readonly id: string
    
}

/**
 * Request parameters for listAllForProject operation in TestsetsApi.
 * @export
 * @interface TestsetsApiListAllForProjectRequest
 */
export type TestsetsApiListAllForProjectRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TestsetsApiListAllForProject
    */
    readonly projectId: string
    
}

/**
 * Request parameters for listTestcases operation in TestsetsApi.
 * @export
 * @interface TestsetsApiListTestcasesRequest
 */
export type TestsetsApiListTestcasesRequest = {
    
    /**
    * String ID of testset. Starts with `evts_`.
    * @type {string}
    * @memberof TestsetsApiListTestcases
    */
    readonly testsetId: string
    
    /**
    * 
    * @type {number}
    * @memberof TestsetsApiListTestcases
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof TestsetsApiListTestcases
    */
    readonly size?: number
    
}

/**
 * Request parameters for update operation in TestsetsApi.
 * @export
 * @interface TestsetsApiUpdateRequest
 */
export type TestsetsApiUpdateRequest = {
    
    /**
    * String ID of testset. Starts with `evts_`.
    * @type {string}
    * @memberof TestsetsApiUpdate
    */
    readonly id: string
    
} & UpdateTestsetRequest

/**
 * TestsetsApiGenerated - object-oriented interface
 * @export
 * @class TestsetsApiGenerated
 * @extends {BaseAPI}
 */
export class TestsetsApiGenerated extends BaseAPI {
    /**
     * Create a new testset for a project.
     * @summary Create
     * @param {TestsetsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsetsApiGenerated
     */
    public create(requestParameters: TestsetsApiCreateRequest, options?: AxiosRequestConfig) {
        return TestsetsApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new testcase for a testset.
     * @summary Create Testcase
     * @param {TestsetsApiCreateTestcaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsetsApiGenerated
     */
    public createTestcase(requestParameters: TestsetsApiCreateTestcaseRequest, options?: AxiosRequestConfig) {
        return TestsetsApiFp(this.configuration).createTestcase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a testset by ID.
     * @summary Delete
     * @param {TestsetsApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsetsApiGenerated
     */
    public delete(requestParameters: TestsetsApiDeleteRequest, options?: AxiosRequestConfig) {
        return TestsetsApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single testset by ID.
     * @summary Get
     * @param {TestsetsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsetsApiGenerated
     */
    public get(requestParameters: TestsetsApiGetRequest, options?: AxiosRequestConfig) {
        return TestsetsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all testsets for a project.
     * @summary List For Project
     * @param {TestsetsApiListAllForProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsetsApiGenerated
     */
    public listAllForProject(requestParameters: TestsetsApiListAllForProjectRequest, options?: AxiosRequestConfig) {
        return TestsetsApiFp(this.configuration).listAllForProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get testcases for a testset.
     * @summary List Testcases
     * @param {TestsetsApiListTestcasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsetsApiGenerated
     */
    public listTestcases(requestParameters: TestsetsApiListTestcasesRequest, options?: AxiosRequestConfig) {
        return paginate({
            initialParameters: requestParameters,
            request: (parameters: TestsetsApiListTestcasesRequest) => {
                return TestsetsApiFp(this.configuration).listTestcases(parameters, options).then((request) => request(this.axios, this.basePath));
            },
        });
    }

    /**
     * Update a testset by ID.
     * @summary Update
     * @param {TestsetsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsetsApiGenerated
     */
    public update(requestParameters: TestsetsApiUpdateRequest, options?: AxiosRequestConfig) {
        return TestsetsApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
