/* tslint:disable */
/* eslint-disable */
/*
Humanloop API

The Humanloop API allows you to interact with Humanloop from your product or service.

You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.

To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:

```bash
pip install humanloop
```

To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:

```bash
npm i humanloop
```

---

Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

The version of the OpenAPI document: 4.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChatMessage } from '../models';
// @ts-ignore
import { ChatRole } from '../models';
// @ts-ignore
import { ConfigProperty2 } from '../models';
// @ts-ignore
import { ConfigResponse } from '../models';
// @ts-ignore
import { CreateEvaluationRequest } from '../models';
// @ts-ignore
import { EvaluationResponse } from '../models';
// @ts-ignore
import { EvaluationResultResponse } from '../models';
// @ts-ignore
import { EvaluationStatus } from '../models';
// @ts-ignore
import { EvaluationTestcaseSnapshotResponse } from '../models';
// @ts-ignore
import { EvaluatorArgumentsType } from '../models';
// @ts-ignore
import { EvaluatorResponse } from '../models';
// @ts-ignore
import { EvaluatorReturnTypeEnum } from '../models';
// @ts-ignore
import { FeedbackLabelsProperty } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LocationPropertyInner } from '../models';
// @ts-ignore
import { LogResponse } from '../models';
// @ts-ignore
import { ModelConfigEvaluatorAggregateResponse } from '../models';
// @ts-ignore
import { PaginatedDataEvaluationTestcaseSnapshotResponse } from '../models';
// @ts-ignore
import { ProviderAPIKeysProperty1 } from '../models';
// @ts-ignore
import { ProviderResponseProperty } from '../models';
// @ts-ignore
import { Target } from '../models';
// @ts-ignore
import { TestcaseResponse } from '../models';
// @ts-ignore
import { TestsetResponse } from '../models';
// @ts-ignore
import { ToolCallProperty } from '../models';
// @ts-ignore
import { ValidationError } from '../models';
// @ts-ignore
import { ValueProperty } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EvaluationsApi - axios parameter creator
 * @export
 */
export const EvaluationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an evaluation.
         * @summary Create
         * @param {string} projectId String ID of project. Starts with &#x60;pr_&#x60;.
         * @param {CreateEvaluationRequest} createEvaluationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (projectId: string, createEvaluationRequest: CreateEvaluationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('create', 'projectId', projectId)
            // verify required parameter 'createEvaluationRequest' is not null or undefined
            assertParamExists('create', 'createEvaluationRequest', createEvaluationRequest)
            const localVarPath = `/projects/{project_id}/evaluations`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createEvaluationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createEvaluationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get evaluation by ID.
         * @summary Get
         * @param {string} id String ID of evaluation run. Starts with &#x60;ev_&#x60;.
         * @param {boolean} [evaluatorAggregates] Whether to include evaluator aggregates in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id: string, evaluatorAggregates?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get', 'id', id)
            const localVarPath = `/evaluations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })
            if (evaluatorAggregates !== undefined) {
                localVarQueryParameter['evaluator_aggregates'] = evaluatorAggregates;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the evaluations associated with your project.
         * @summary List For Project
         * @param {string} projectId String ID of project. Starts with &#x60;pr_&#x60;.
         * @param {boolean} [evaluatorAggregates] Whether to include evaluator aggregates in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllForProject: async (projectId: string, evaluatorAggregates?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listAllForProject', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/evaluations`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })
            if (evaluatorAggregates !== undefined) {
                localVarQueryParameter['evaluator_aggregates'] = evaluatorAggregates;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get testcases by evaluation ID.
         * @summary List Testcases
         * @param {string} id String ID of evaluation. Starts with &#x60;ev_&#x60;.
         * @param {number} [page] Page to fetch. Starts from 1.
         * @param {number} [size] Number of evaluation results to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTestcases: async (id: string, page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTestcases', 'id', id)
            const localVarPath = `/evaluations/{id}/testcases`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-KEY", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EvaluationsApi - functional programming interface
 * @export
 */
export const EvaluationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EvaluationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an evaluation.
         * @summary Create
         * @param {EvaluationsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: EvaluationsApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.projectId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get evaluation by ID.
         * @summary Get
         * @param {EvaluationsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: EvaluationsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.id, requestParameters.evaluatorAggregates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the evaluations associated with your project.
         * @summary List For Project
         * @param {EvaluationsApiListAllForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllForProject(requestParameters: EvaluationsApiListAllForProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EvaluationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllForProject(requestParameters.projectId, requestParameters.evaluatorAggregates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get testcases by evaluation ID.
         * @summary List Testcases
         * @param {EvaluationsApiListTestcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTestcases(requestParameters: EvaluationsApiListTestcasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDataEvaluationTestcaseSnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTestcases(requestParameters.id, requestParameters.page, requestParameters.size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EvaluationsApi - factory interface
 * @export
 */
export const EvaluationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EvaluationsApiFp(configuration)
    return {
        /**
         * Create an evaluation.
         * @summary Create
         * @param {EvaluationsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: EvaluationsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<EvaluationResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get evaluation by ID.
         * @summary Get
         * @param {EvaluationsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: EvaluationsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<EvaluationResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the evaluations associated with your project.
         * @summary List For Project
         * @param {EvaluationsApiListAllForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllForProject(requestParameters: EvaluationsApiListAllForProjectRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EvaluationResponse>> {
            return localVarFp.listAllForProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get testcases by evaluation ID.
         * @summary List Testcases
         * @param {EvaluationsApiListTestcasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTestcases(requestParameters: EvaluationsApiListTestcasesRequest, options?: AxiosRequestConfig): AxiosPromise<PaginatedDataEvaluationTestcaseSnapshotResponse> {
            return localVarFp.listTestcases(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiCreateRequest
 */
export type EvaluationsApiCreateRequest = {
    
    /**
    * String ID of project. Starts with `pr_`.
    * @type {string}
    * @memberof EvaluationsApiCreate
    */
    readonly projectId: string
    
} & CreateEvaluationRequest

/**
 * Request parameters for get operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiGetRequest
 */
export type EvaluationsApiGetRequest = {
    
    /**
    * String ID of evaluation run. Starts with `ev_`.
    * @type {string}
    * @memberof EvaluationsApiGet
    */
    readonly id: string
    
    /**
    * Whether to include evaluator aggregates in the response.
    * @type {boolean}
    * @memberof EvaluationsApiGet
    */
    readonly evaluatorAggregates?: boolean
    
}

/**
 * Request parameters for listAllForProject operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiListAllForProjectRequest
 */
export type EvaluationsApiListAllForProjectRequest = {
    
    /**
    * String ID of project. Starts with `pr_`.
    * @type {string}
    * @memberof EvaluationsApiListAllForProject
    */
    readonly projectId: string
    
    /**
    * Whether to include evaluator aggregates in the response.
    * @type {boolean}
    * @memberof EvaluationsApiListAllForProject
    */
    readonly evaluatorAggregates?: boolean
    
}

/**
 * Request parameters for listTestcases operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiListTestcasesRequest
 */
export type EvaluationsApiListTestcasesRequest = {
    
    /**
    * String ID of evaluation. Starts with `ev_`.
    * @type {string}
    * @memberof EvaluationsApiListTestcases
    */
    readonly id: string
    
    /**
    * Page to fetch. Starts from 1.
    * @type {number}
    * @memberof EvaluationsApiListTestcases
    */
    readonly page?: number
    
    /**
    * Number of evaluation results to retrieve.
    * @type {number}
    * @memberof EvaluationsApiListTestcases
    */
    readonly size?: number
    
}

/**
 * EvaluationsApiGenerated - object-oriented interface
 * @export
 * @class EvaluationsApiGenerated
 * @extends {BaseAPI}
 */
export class EvaluationsApiGenerated extends BaseAPI {
    /**
     * Create an evaluation.
     * @summary Create
     * @param {EvaluationsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public create(requestParameters: EvaluationsApiCreateRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get evaluation by ID.
     * @summary Get
     * @param {EvaluationsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public get(requestParameters: EvaluationsApiGetRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the evaluations associated with your project.
     * @summary List For Project
     * @param {EvaluationsApiListAllForProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public listAllForProject(requestParameters: EvaluationsApiListAllForProjectRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).listAllForProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get testcases by evaluation ID.
     * @summary List Testcases
     * @param {EvaluationsApiListTestcasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public listTestcases(requestParameters: EvaluationsApiListTestcasesRequest, options?: AxiosRequestConfig) {
        return paginate({
            initialParameters: requestParameters,
            request: (parameters: EvaluationsApiListTestcasesRequest) => {
                return EvaluationsApiFp(this.configuration).listTestcases(parameters, options).then((request) => request(this.axios, this.basePath));
            },
        });
    }
}
